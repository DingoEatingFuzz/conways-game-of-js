// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Player, printBoard, printLines;

  Player = (function() {
    function Player(size, gameCanvas, gridCanvas) {
      this.size = size;
      this.gameCanvas = gameCanvas;
      this.gridCanvas = gridCanvas;
      this.isRunning = true;
      this.gameCtx = this.gameCanvas.getContext('2d');
      this.gridCtx = this.gridCanvas.getContext('2d');
      this.setup();
      this.start();
    }

    Player.prototype.minGridSize = 3;

    Player.prototype.size = 10;

    Player.prototype.setup = function() {
      this.board = GameOfLife(Math.floor(this.gameCanvas.width / this.size), Math.floor(this.gameCanvas.height / this.size));
      if (this.size > this.minGridSize) {
        return printLines(this.gridCanvas, this.size);
      }
    };

    Player.prototype.reset = function(size) {
      this.size = size;
      this.clear();
      return this.setup();
    };

    Player.prototype.start = function() {
      this.isRunning = true;
      return this.step();
    };

    Player.prototype.stop = function() {
      return this.isRunning = false;
    };

    Player.prototype.step = function() {
      console.log("steppin");
      this.board.step();
      printBoard(this.board, this.gameCtx, this.size);
      if (this.isRunning) {
        return requestAnimationFrame((function(_this) {
          return function() {
            return _this.step();
          };
        })(this));
      }
    };

    Player.prototype.clear = function() {
      this.gameCtx.clearRect(0, 0, this.gameCanvas.width, this.gameCanvas.height);
      return this.gridCtx.clearRect(0, 0, this.gridCanvas.width, this.gridCanvas.height);
    };

    return Player;

  })();

  printBoard = function(board, ctx, size) {
    var i, x, y, _i, _ref, _results;
    ctx.fillStyle = '#FFF';
    ctx.fillRect(0, 0, board.width * size, board.height * size);
    ctx.fillStyle = '#09F';
    ctx.beginPath();
    _results = [];
    for (i = _i = 0, _ref = board.cells.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      x = i % board.width;
      y = Math.floor(i / board.width);
      if (board.cells[i]) {
        _results.push(ctx.fillRect(x * size, y * size, size, size));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  printLines = function(canvas, size) {
    var ctx, i, x, _i, _j, _len, _len1, _ref, _ref1;
    ctx = canvas.getContext('2d');
    ctx.strokeStyle = '#CCC';
    ctx.lineWidth = 1;
    ctx.beginPath();
    _ref = (function() {
      var _j, _ref, _results;
      _results = [];
      for (x = _j = 0, _ref = canvas.width / size; 0 <= _ref ? _j <= _ref : _j >= _ref; x = 0 <= _ref ? ++_j : --_j) {
        _results.push(x * size - 0.5);
      }
      return _results;
    })();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      ctx.moveTo(i, 0);
      ctx.lineTo(i, canvas.height);
    }
    _ref1 = (function() {
      var _k, _ref1, _results;
      _results = [];
      for (x = _k = 0, _ref1 = canvas.height / size; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; x = 0 <= _ref1 ? ++_k : --_k) {
        _results.push(x * size - 0.5);
      }
      return _results;
    })();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      i = _ref1[_j];
      ctx.moveTo(0, i);
      ctx.lineTo(canvas.width, i);
    }
    ctx.stroke();
    return ctx.closePath();
  };

  window.Player = Player;

}).call(this);
